%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   Copyright 2012 Analog Devices, Inc.
%
%   Licensed under the Apache License, Version 2.0 (the "License");
%   you may not use this file except in compliance with the License.
%   You may obtain a copy of the License at
%
%       http://www.apache.org/licenses/LICENSE-2.0
%
%   Unless required by applicable law or agreed to in writing, software
%   distributed under the License is distributed on an "AS IS" BASIS,
%   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%   See the License for the specific language governing permissions and
%   limitations under the License.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function [factorgraph, variables] = stereovision(depth,data_set,width,height,solver,k)

blockWidth = width;
blockHeight = height;
dataset = load_dataset(data_set);

% Load images.
imageL = dataset.Left.Image;
imageR = dataset.Right.Image;

%trim the image so that we can divide into blocks
width = size(imageL,2);
height = size(imageL,1);
width = width - mod(width,blockWidth);
height = height - mod(height,blockHeight);
imageL = imageL(1:height,1:width,:);
imageR = imageR(1:height,1:width,:);

% Set parameters.
ed     = 0.01;
ep     = 0.001;
sigmaD = 8;
sigmaP = 0.05;
sigmaF = 0.3;

% Convert the images to grayscale without using the image processing
% toolbox.
color2gray = @(image) ...
    0.2989 * double(image(:, :, 1)) + ...
    0.5870 * double(image(:, :, 2)) + ...
    0.1140 * double(image(:, :, 3));
inputL = color2gray(imageL);
inputR = color2gray(imageR);
[height, width] = size(inputL);

% Create temporary function handles.
rho_d_ = @(y, x, d) rho_d(x, y, d, ed, sigmaD, sigmaF, inputL, inputR);
rho_p_ = @(ds, dt) rho_p(ds, dt, ep, sigmaP);


% Check image sizes.
if (size(inputL) ~= size(inputR))
    error('Stereovision:FPT:GetFactorgraph','Mismatched image sizes.');
end

% Create Factor Graph and set solver.
factorgraph = FactorGraph();
factorgraph.Solver = solver;

% Create variables and add factors connection variables.
variables = Variable(0:(depth - 1), height/blockHeight, width/blockWidth);

%Set inputs
disp('Setting inputs...');
[A,B] = meshgrid(1:height,1:width);
input = zeros(height/blockHeight,width/blockWidth,depth);
for i = 1:depth
    tmp = rho_d_(A,B,i);
    tmp = reshape(tmp,blockHeight,height/blockHeight,blockWidth,width/blockWidth);
    tmp = prod(tmp,1);
    tmp = prod(tmp,3);
    input(:,:,i) = tmp(1,:,1,:);
end

variables.Input = input;

%Set horizontal similarity factors
disp('horizontal factors...');
hfs = factorgraph.addFactorVectorized(rho_p_,variables(1:end,1:end-1),variables(1:end,2:end));

%Support K-Best
if k ~= 0
    solvers = hfs.Solver;
    for i = 1:length(solvers)
       solvers{i}.setK(k);
    end
end

%Set vertical similarity factors
disp('vertical factors...');
vfs = factorgraph.addFactorVectorized(rho_p_,variables(1:end-1,1:end),variables(2:end,1:end));

%Support K-Best
if k ~= 0
    solvers = vfs.Solver;
    for i = 1:length(solvers)
        solvers{i}.setK(k);
    end
end

end
